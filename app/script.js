// import necessary module
import http from "k6/http";
import { SharedArray } from "k6/data";
import { scenario } from "k6/execution";

// define URL and payload
const URL = `http://${__ENV.URL}/v1/chat/completions/`;
const data = new SharedArray("synthetic triton data", function () {
  return JSON.parse(open("/data/llm_inputs.json")).data;
});

export const options = {
  discardResponseBodies: true,
  scenarios: {
    llm_nim_use_all_the_data: {
      executor: "shared-iterations",
      vus: __ENV.CONCURRENCY,
      iterations: data.length, // cycle through all the data generated by genai-perf.
      maxDuration: __ENV.K6_MAX_TEST_TIME_MINS,
      exec: "nim",
    },
    llm_nim_constant_vus: {
      executor: "constant-vus",
      exec: "nim",
      vus: __ENV.CONCURRENCY,
      // iterations: data.length,
      duration: __ENV.K6_MAX_TEST_TIME_MINS,
    },
    llm_nim_per_vu_iterations: {
      executor: "per-vu-iterations",
      exec: "nim",
      vus: __ENV.CONCURRENCY,
      // iterations: data.length,
      startTime: "30s",
      maxDuration: __ENV.K6_MAX_TEST_TIME_MINS,
    },
    llm_nim_constant_arrival_rate: {
      executor: "constant-arrival-rate",
      exec: "nim",
      rate: 90,
      timeUnit: "1m", // 90 iterations per minute, i.e. 1.5 RPS
      // iterations: data.length,
      duration: __ENV.K6_MAX_TEST_TIME_MINS,
      preAllocatedVUs: __ENV.CONCURRENCY, // the size of the VU (i.e. worker) pool for this scenario
    },
    llm_nim_ramping_arrival_rate: {
      executor: "ramping-arrival-rate",
      startTime: "30s", // the ramping API test starts a little later
      startRate: 50,
      // iterations: data.length,
      timeUnit: "1s", // we start at 50 iterations per second
      stages: [
        { target: 200, duration: "30s" }, // go from 50 to 200 iters/s in the first 30 seconds
        { target: 200, duration: __ENV.K6_MAX_TEST_TIME_MINS }, // hold at 200 iters/s for max time
        { target: 0, duration: "30s" }, // ramp down back to 0 iters/s over the last 30 second
      ],
      preAllocatedVUs: 1, // how large the initial pool of VUs would be
      maxVUs: __ENV.CONCURRENCY, // if the preAllocatedVUs are not enough, we can initialize more
      exec: "nim", // same function as the scenario above, but with different env vars
    },
  },
};

export function nim() {
  const params = {
    headers: {
      "Content-Type": "application/json",
    },
  };
  const randomInteger = Math.floor(Math.random() * data.length);
  const query = data[randomInteger].payload[0];
  const payload = JSON.stringify(query);
  http.post(URL, payload, params);
}
